name: ci
on:
  pull_request:
  push:
    tags:
    branches:
      - main

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-20.04
          - macos-10.15
          - windows-2019
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - llvm
          - gcc-8
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        package_maintainer_mode:
          - ON
          - OFF
        large_tests:
          - OFF

        exclude:
          # mingw is determined by this author to be too buggy to support
          - os: windows-2019
            compiler: gcc-8
          # These have anonalous failures, not sure what is up with no access to a physical Mac.
          - os: macos-10.15
            compiler: gcc-8
            build_type: Debug
            package_maintainer_mode: OFF
          - os: macos-10.15
            compiler: llvm
            build_type: Release
            package_maintainer_mode: OFF



        include:
          # setup gcov variables for extra compiler versions
          - compiler: llvm
            gcov: "llvm-cov gcov"
          - compiler: gcc-8
            gcov: "gcov-8"

          # setup preferred package generators
          - package_maintainer_mode: ON
            build_type: Release
            package_generator: TBZ2


          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-20.04
            compiler: gcc
            gcov: gcov
            generator: "Unix Makefiles"
            build_type: Debug
            package_maintainer_mode: OFF

          - os: windows-2019
            compiler: msvc
            generator: "Visual Studio 16 2019"
            build_type: Debug
            package_maintainer_mode: OFF
          - os: windows-2019
            compiler: msvc
            generator: "Visual Studio 16 2019"
            build_type: Release
            package_maintainer_mode: OFF
          - os: windows-2019
            compiler: msvc
            generator: "Visual Studio 16 2019"
            build_type: Debug
            package_maintainer_mode: ON
          - os: windows-2019
            compiler: msvc
            generator: "Visual Studio 16 2019"
            build_type: Release
            package_maintainer_mode: ON
            package_generator: ZIP





    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{matrix.build_type}}-${{matrix.generator}}-${{matrix.package_maintainer_mode}}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-${{matrix.build_type}}-${{matrix.generator}}-${{matrix.package_maintainer_mode}}

      - run: pip3 install cmake ninja

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: false
          ninja: false
          vcpkg: false
          ccache: true
          clangtidy: true

          cppcheck: true

          gcovr: true
          opencppcoverage: true

      - name: Configure CMake
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -Djson2cpp_ENABLE_PACKAGING_MAINTAINER_MODE:BOOL=${{matrix.package_maintainer_mode}} -Djson2cpp_ENABLE_LARGE_TESTS:BOOL=${{matrix.large_tests}} -Djson2cpp_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DGIT_SHA:STRING=${{ github.sha }}

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          pwd
          which gcov
          gcov --version
          gcovr --version
          gcovr -j ${{env.nproc}} --root ../ --print-summary --xml-pretty --xml coverage.xml . --verbose --gcov-executable '${{matrix.gcov}}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: Build Package
        if: matrix.package_generator != ''
        working-directory: ./build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - name: Publish Snapshot Release
        uses: softprops/action-gh-release@v1
        if: ${{ (github.ref == 'refs/heads/main') && matrix.package_generator != '' }}
        with:
          tag_name: "snapshot-${{ github.sha }}"
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
